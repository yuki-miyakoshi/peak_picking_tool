name: Build and Release

on: [push]

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: コードをチェックアウト
      uses: actions/checkout@v2

    - name: バージョンをバンプしてタグ付け
      id: bump_version
      shell: bash
      run: |
        NEW_TAG=$(date +"%Y%m%d%H%M%S")
        echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
        git tag $NEW_TAG
        git push origin $NEW_TAG

    - name: Pythonをセットアップ
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: 依存関係のキャッシュを復元
      uses: actions/cache@v2
      id: cache-pip
      with:
        path: |
          ~/.cache/pip
          .venv
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          ${{ runner.os }}-

    - name: 依存関係をインストール
      if: steps.cache-pip.outputs.cache-hit != 'true'
      shell: bash
      run: |
        python -m pip install --upgrade pip
        pip install pipreqs
        if [ ! -f "requirements.txt" ]; then
          echo "requirements.txt が存在しないため生成します。"
          pipreqs . --force
        fi
        pip install -r requirements.txt

    - name: PyInstallerをインストール
      shell: bash
      run: pip install pyinstaller

    - name: ビルド成果物のキャッシュを復元
      uses: actions/cache@v2
      id: cache-dist
      with:
        path: dist
        key: ${{ runner.os }}-dist-${{ hashFiles('**/src/**') }}
        restore-keys: |
          ${{ runner.os }}-dist-

    - name: 実行可能ファイルをビルド
      shell: bash
      run: pyinstaller --onefile src/main.py

    - name: ファイル名を変更
      shell: bash
      run: |
        REPO_NAME=$(basename `git rev-parse --show-toplevel`)
        mv dist/main.exe dist/$REPO_NAME.exe

    - name: ビルド成果物をキャッシュ
      uses: actions/cache@v2
      with:
        path: dist
        key: ${{ runner.os }}-dist-${{ hashFiles('**/src/**') }}

    - name: 証明書ファイルを生成
      shell: bash
      env:
        MSYS_NO_PATHCONV: 1
      run: |
        openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout $(pwd)/cert.key -out $(pwd)/cert.pem -subj "/C=JP/ST=Tokyo/L=Chiyoda-ku/O=YourOrganization/OU=YourUnit/CN=yourdomain.com"
        openssl pkcs12 -export -out $(pwd)/cert.pfx -inkey $(pwd)/cert.key -in $(pwd)/cert.pem -passout pass:${{ secrets.CERTIFICATE_PASSWORD }}

    - name: 証明書ファイルの検証
      shell: bash
      run: |
        openssl pkcs12 -in $(pwd)/cert.pfx -noout -info -passin pass:${{ secrets.CERTIFICATE_PASSWORD }}

    - name: 実行ファイルに署名
      uses: skymatic/code-sign-action@v3.0.0
      with:
        certificate: $(pwd)/cert.pfx
        password: ${{ secrets.CERTIFICATE_PASSWORD }}
        description: 'Your App'
        timestampUrl: 'http://timestamp.digicert.com'
        folder: 'dist'
        recursive: false

    - name: GitHubリリースを作成
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.NEW_TAG }}
        release_name: Release ${{ env.NEW_TAG }}
        draft: false
        prerelease: false

    - name: リリースアセットをアップロード
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/${{ github.event.repository.name }}.exe
        asset_name: ${{ github.event.repository.name }}.exe
        asset_content_type: application/octet-stream
