name: Build and Release

on: [push]

jobs:
  build-and-tag:
    runs-on: ubuntu-latest

    steps:
    - name: コードをチェックアウト
      uses: actions/checkout@v2

    - name: Gitの設定
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: バージョンをバンプしてタグ付け
      id: bump_version
      shell: bash
      run: |
        NEW_TAG=$(date +'%Y%m%d%H%M%S')
        echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
        git tag $NEW_TAG
        git push origin $NEW_TAG

    - name: Pythonをセットアップ
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: 依存関係のキャッシュを復元
      uses: actions/cache@v2
      with:
        path: |
          ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 依存関係をインストール
      run: |
        python -m pip install --upgrade pip
        pip install pipreqs
        if [ ! -f requirements.txt ]; then
          echo "requirements.txt が存在しないため生成します。"
          pipreqs . --force
        fi
        pip install -r requirements.txt

    - name: pyinstaller をインストール
      run: pip install pyinstaller

    - name: 実行可能ファイルをビルド
      run: pyinstaller --onefile src/main.py

    - name: ファイル名を変更
      shell: bash
      run: |
        REPO_NAME=$(basename `git rev-parse --show-toplevel`)
        mv dist/main dist/$REPO_NAME

    - name: OpenSSLをインストール
      run: sudo apt-get update && sudo apt-get install -y openssl

    - name: 自己署名証明書を作成
      shell: bash
      env:
        CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
      run: |
        openssl req -new -newkey rsa:2048 -days 365 -nodes -x509 -subj "/CN=YourName" -keyout mykey.pem -out mycert.pem
        openssl pkcs12 -export -out mycert.pfx -inkey mykey.pem -in mycert.pem -password pass:$CERTIFICATE_PASSWORD

    - name: 実行ファイルに署名
      shell: bash
      env:
        CERTIFICATE_PASSWORD: ${{ secrets.CERTIFICATE_PASSWORD }}
      run: |
        sudo apt-get install -y osslsigncode
        REPO_NAME=$(basename `git rev-parse --show-toplevel`)
        osslsigncode sign -pkcs12 mycert.pfx -pass $CERTIFICATE_PASSWORD -n "My Application" -i "http://example.com" -t "http://timestamp.digicert.com" -in dist/$REPO_NAME -out dist/$REPO_NAME-signed

    - name: GitHubリリースを作成
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.NEW_TAG }}
        release_name: Release ${{ env.NEW_TAG }}
        draft: false
        prerelease: false

    - name: リリースアセットをアップロード
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/${{ github.event.repository.name }}-signed
        asset_name: ${{ github.event.repository.name }}-signed
        asset_content_type: application/octet-stream
