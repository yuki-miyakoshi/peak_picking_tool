name: Build, Update Requirements and Release

on:
  push:
    branches:
      - main

jobs:
  update-requirements-and-build:
    runs-on: windows-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          $poetryPath = [System.Environment]::GetEnvironmentVariable("USERPROFILE") + "\AppData\Roaming\Python\Scripts"
          echo "poetryPath=$poetryPath" >> $GITHUB_ENV

      - name: Add Poetry to PATH
        run: echo "${{ env.poetryPath }}" >> $GITHUB_PATH

      - name: Install dependencies with Poetry
        run: poetry install

      - name: Update dependencies with Poetry
        run: poetry update

      - name: Export requirements.txt
        run: poetry export -f requirements.txt --output requirements.txt --without-hashes

      - name: Check if requirements.txt has changed
        id: git_diff
        run: |
          git diff --exit-code requirements.txt
        continue-on-error: true

      - name: Commit and push updated requirements.txt
        if: steps.git_diff.outcome == 'failure'
        run: |
          git add requirements.txt
          git commit -m 'Update requirements.txt'
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Build executable
        run: pyinstaller --onefile peak_picking_tool.py

      - name: Bump version and tag
        id: bump_version
        shell: pwsh
        run: |
          $NEW_TAG = (Get-Date -Format "yyyyMMddHHmmss")
          "NEW_TAG=$NEW_TAG" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          git tag $NEW_TAG
          git push origin $NEW_TAG

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_TAG }}
          release_name: Release ${{ env.NEW_TAG }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/peak_picking_tool.exe
          asset_name: peak_picking_tool.exe
          asset_content_type: application/octet-stream
