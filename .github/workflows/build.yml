name: Build and Release

on: [push]

jobs:
  build-and-tag:
    runs-on: windows-latest

    steps:
    - name: コードをチェックアウト
      uses: actions/checkout@v2

    - name: Gitの設定
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"

    - name: バージョンをバンプしてタグ付け
      id: bump_version
      shell: pwsh
      run: |
        $NEW_TAG = (Get-Date -Format "yyyyMMddHHmmss")
        "NEW_TAG=$NEW_TAG" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        git tag $NEW_TAG
        git push origin $NEW_TAG

    - name: Pythonをセットアップ
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: キャッシュディレクトリの設定
      id: cache
      uses: actions/cache@v2
      with:
        path: |
          build/.venv
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 依存関係を自動生成
      run: |
        python -m pip install --upgrade pip
        pip install pipreqs
        if (!(Test-Path "requirements.txt")) {
          Write-Host "requirements.txt が存在しないため生成します。"
          pipreqs . --force

    - name: 仮想環境のセットアップ
      run: |
        python -m venv build/.venv

    - name: 仮想環境のアクティベートと依存関係のインストール
      run: |
        .\build\.venv\Scripts\Activate.ps1
        pip install -r requirements.txt

    - name: pyinstaller をインストール
      run: |
        .\build\.venv\Scripts\Activate.ps1
        pip install pyinstaller

    - name: 実行可能ファイルをビルド
      run: |
        .\build\.venv\Scripts\Activate.ps1
        pyinstaller --onefile peak_picking_tool.py

    - name: GitHubリリースを作成
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.NEW_TAG }}
        release_name: Release ${{ env.NEW_TAG }}
        draft: false
        prerelease: false

    - name: リリースアセットをアップロード
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/peak_picking_tool.exe
        asset_name: peak_picking_tool.exe
        asset_content_type: application/octet-stream
