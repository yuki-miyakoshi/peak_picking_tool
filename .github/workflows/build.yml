name: Build and Release

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: コードをチェックアウト
      uses: actions/checkout@v2

    - name: バージョンをバンプしてタグ付け
      id: bump_version
      shell: bash
      run: |
        NEW_TAG=$(date +"%Y%m%d%H%M%S")
        echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
        git tag $NEW_TAG
        git push origin $NEW_TAG

    - name: Pythonをセットアップ
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: 依存関係のキャッシュを復元
      uses: actions/cache@v2
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 依存関係をインストール
      run: |
        python -m pip install --upgrade pip
        pip install pipreqs
        if [ ! -f "requirements.txt" ];then
          echo "requirements.txt が存在しないため生成します。"
          pipreqs . --force
        fi
        pip install -r requirements.txt

    - name: PyInstallerをインストール
      run: pip install pyinstaller

    - name: 実行可能ファイルをビルド
      run: pyinstaller --onefile src/main.py

    - name: ファイル名を変更
      run: |
        REPO_NAME=$(basename `git rev-parse --show-toplevel`)
        mv dist/main dist/$REPO_NAME.exe

    - name: 証明書ファイルを準備
      run: |
        echo "${{ secrets.CERT_PFX }}" | base64 --decode > cert.pfx

    - name: 証明書の分割
      run: |
        openssl pkcs12 -in cert.pfx -nocerts -out private.key -password pass:${{ secrets.CERTIFICATE_PASSWORD }} -nodes 2> error.log
        cat error.log
        openssl pkcs12 -in cert.pfx -nokeys -out public.crt -password pass:${{ secrets.CERTIFICATE_PASSWORD }} 2>> error.log
        cat error.log

    - name: 実行ファイルに署名
      run: |
        osslsigncode sign -certs public.crt -key private.key -pass "${{ secrets.CERTIFICATE_PASSWORD }}" -n "Your App" -i http://www.yourwebsite.com -t http://timestamp.digicert.com -in dist/${{ github.event.repository.name }}.exe -out dist/${{ github.event.repository.name }}-signed.exe

    - name: GitHubリリースを作成
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.NEW_TAG }}
        release_name: Release ${{ env.NEW_TAG }}
        draft: false
        prerelease: false

    - name: リリースアセットをアップロード
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/${{ github.event.repository.name }}-signed.exe
        asset_name: ${{ github.event.repository.name }}-signed.exe
        asset_content_type: application/octet-stream
