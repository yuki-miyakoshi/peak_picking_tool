name: Build and Sign

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: コードをチェックアウト
      uses: actions/checkout@v2

    - name: バージョンをバンプしてタグ付け
      id: bump_version
      shell: bash
      run: |
        NEW_TAG=$(date +"%Y%m%d%H%M%S")
        echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
        git tag $NEW_TAG
        git push origin $NEW_TAG

    - name: Pythonをセットアップ
      uses: actions/setup-python@v2
      with:
        python-version: 3.x

    - name: 依存関係のインストール
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller

    - name: 実行ファイルをビルド
      run: pyinstaller --onefile src/main.py

    - name: osslsigncodeのインストール
      run: sudo apt-get install -y osslsigncode

    - name: PFXファイルをデコードして書き込み
      run: echo "${{ secrets.CERT_PFX_BASE64 }}" | base64 -d > cert.pfx

    - name: 証明書と秘密鍵の抽出
      run: |
        openssl pkcs12 -in cert.pfx -out cert.pem -nodes -nokeys -passin pass:${{ secrets.CERTIFICATE_PASSWORD }}
        openssl pkcs12 -in cert.pfx -out cert.key -nodes -nocerts -passin pass:${{ secrets.CERTIFICATE_PASSWORD }}

    - name: 実行ファイルに署名
      run: |
        osslsigncode sign -certs cert.pem -key cert.key -n "Your App" -t http://timestamp.digicert.com -in dist/main.exe -out dist/main-signed.exe

    - name: GitHubリリースを作成
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.NEW_TAG }}
        release_name: Release ${{ env.NEW_TAG }}
        draft: false
        prerelease: false

    - name: リリースアセットをアップロード
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dist/main-signed.exe
        asset_name: main-signed.exe
        asset_content_type: application/octet-stream
